import java.io.IOException;
import java.io.Reader;

class Interpreter {

    /** Abstract Syntax Tree generated by the parser */
    private AST ast;

    /** Constructor */
    Interpreter(String fileName) throws IOException { this(new Parser(fileName)); }

    /** Constructor */
    Interpreter(Reader reader) { this(new Parser(reader)); }

    /** Constructor */
    Interpreter(Parser p) { this(p.parse()); }

    /** Constructor */
    Interpreter(AST ast) { this.ast = ast; }

    /** Interprets the program using call-by-value strategy */
    public JamVal callByValue() {
        return this.ast.accept(new ASTInterpreter(new Empty<Binding>(), EvaluationType.CALL_BY_VALUE));
    }

    /** Interprets the program using call-by-name strategy */
    public JamVal callByName() {
        return this.ast.accept(new ASTInterpreter(new Empty<Binding>(), EvaluationType.CALL_BY_NAME));
    }

    /** Interprets the program using call-by-need strategy */
    public JamVal callByNeed() {
        return this.ast.accept(new ASTInterpreter(new Empty<Binding>(), EvaluationType.CALL_BY_NEED));
    }
    
    public JamVal valueValue() {
        return null;
    }
    
    public JamVal nameValue() {
        return null;
    }
    public JamVal needValue() {
        return null;
    }
    
    public JamVal valueName() {
        return null;
    }
    
    public JamVal nameName() {
        return null;
    }
    
    public JamVal needName() {
        return null;
    }
    
    
    public JamVal valueNeed() {
        return null;
    }
    
    public JamVal nameNeed() {
        return null;
    }
    
    public JamVal needNeed() {
        return null;
    }
    
}


