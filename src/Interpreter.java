import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;

/** Jam Interpreter */
class Interpreter {
    
    public AST getAST() { return ast; }
    public static void main(String[] args) {
        //String p = "letrec appendz1 := map xz2,yz2,z0 to if (xz2 =null) then z0(yz2) else let z1 := first(xz2); in appendz1(rest(xz2), yz2, map z3 to z0(let z2 := z3; in cons(z1, z2))); in let sz2 := cons(1, cons(2, cons(3, null))); in appendz1(sz2, sz2, map x to x)";
        String p = "let Y := map f to let g := map x to f(map z to (x(x))(z)); in g(g);\n         FACT := map f to map n to if n = 0 then 1 else n * f(n - 1);\n      in (Y(FACT))(6)";
        //String p = "let c := 2; in  let x := map a to c*a; y := map a,b to a*b; in  x(5) + y(2, 5)";
        //String p = "let a := 1; in let x := a; in x";
        Interpreter i = new Interpreter(new StringReader(p));
        //System.out.println(i.getAST());
        //System.out.println(i.cpsEval());
        //System.out.println(i.convertToCPS());
        System.out.println(Unshadow.convert(i.getAST()));
    }

    /** Abstract Syntax Tree generated by the parser */
    private AST ast;

    /** Constructor */
    Interpreter(String fileName) throws IOException { this(new Parser(fileName)); }

    /** Constructor */
    Interpreter(Reader reader) { this(new Parser(reader)); }

    /** Constructor */
    Interpreter(Parser p) { this(p.parse()); }

    /** Constructor */
    Interpreter(AST ast) { this.ast = ast; }

    /** Interprets the program using a call-by-value calling convention and a cons-by-value cons convention */
    public JamVal eval() {
        Context.check(ast);
        return this.ast.accept(new ASTInterpreter(
                new Empty<Binding>(), new EvaluationPolicy(EvaluationType.BY_VALUE, EvaluationType.BY_VALUE)));
    }
    
    public AST unshadow() {
        Context.check(ast);
        return Unshadow.convert(ast);
    }
    
    public AST convertToCPS() {
        Cps cps = new Cps(unshadow());
        return cps.convert();
    }
    
    public JamVal cpsEval() {
        return convertToCPS().accept(new ASTInterpreter(
                new Empty<Binding>(), new EvaluationPolicy(EvaluationType.BY_VALUE, EvaluationType.BY_VALUE)));
    }
    public AST convertToSD() {
        Sd sd = new Sd(ast);
        return sd.convert();
    }
    
    public JamVal SDEval() {
        return convertToSD().accept(new ASTInterpreter(
                new Empty<Binding>(), new EvaluationPolicy(EvaluationType.BY_VALUE, EvaluationType.BY_VALUE)));
    }
    
    public JamVal SDCpsEval() {
        Sd sd = new Sd(convertToCPS());
        return sd.convert().accept(new ASTInterpreter(
                new Empty<Binding>(), new EvaluationPolicy(EvaluationType.BY_VALUE, EvaluationType.BY_VALUE)));
    }
    
}


