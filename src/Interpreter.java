import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;

/** Jam Interpreter */
class Interpreter {
    
    public static void main(String[] args) {
        String p = "let x1 := let x2 := 1; in x2 + 1; in x1 + 1";
        Interpreter i = new Interpreter(new StringReader(p), 0);
        System.out.println(i.convertToCPS());
        //System.out.println(i.cpsEval());
    }

    /** Abstract Syntax Tree generated by the parser */
    private AST ast;
    
    /** Heap size of the program */
    private int heapSize;

    /** Constructor */
    Interpreter(String fileName, int hs) throws IOException { this(new Parser(fileName), hs); }

    /** Constructor */
    Interpreter(Reader reader, int hs) { this(new Parser(reader), hs); }

    /** Constructor */
    Interpreter(Parser p, int hs) { this(p.parse(), hs); }

    /** Constructor */
    Interpreter(AST ast, int hs) { this.ast = ast; this.heapSize = hs; }

    /** Interprets the program using a call-by-value calling convention and a cons-by-value cons convention */
    public JamVal eval() {
        Context.check(ast);
        return this.ast.accept(new ASTInterpreter(
                new Empty<Binding>(), new EvaluationPolicy(EvaluationType.BY_VALUE, EvaluationType.BY_VALUE)));
    }
    
    /** Performs the unshadowing transormation and returns result */
    public AST unshadow() {
        Context.check(ast);
        return Unshadow.convert(ast);
    }
    
    /** Generate the CPS form of the AST */
    public AST convertToCPS() {
        Cps cps = new Cps(unshadow());
        return cps.convert();
    }
    
    /** Interprets the CPS form of the AST */
    public JamVal cpsEval() {
        return convertToCPS().accept(new ASTInterpreter(
                new Empty<Binding>(), new EvaluationPolicy(EvaluationType.BY_VALUE, EvaluationType.BY_VALUE)));
    }
    
    /** Generate the static-distance form of the AST */
    public AST convertToSD() {
        Sd sd = new Sd(ast);
        return sd.convert();
    }
    
    /** Interprets the static-distance form of the AST */
    public JamVal SDEval() {
        return convertToSD().accept(new ASTInterpreter(
                new Empty<Binding>(), new EvaluationPolicy(EvaluationType.BY_VALUE, EvaluationType.BY_VALUE)));
    }
    
    /** First generae the CPS form of the AST, then interprets its static-distance form */
    public JamVal SDCpsEval() {
        Sd sd = new Sd(convertToCPS());
        return sd.convert().accept(new ASTInterpreter(
                new Empty<Binding>(), new EvaluationPolicy(EvaluationType.BY_VALUE, EvaluationType.BY_VALUE)));
    }
    
    /** Returns the heap memory array */
    int[] getMemory() {
        return new int[0];
    }
}


